{"version":3,"sources":["chips/chips.ts"],"names":[],"mappings":"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","file":"chips.js","sourcesContent":["import {\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    Output,\n    ViewChild,\n    NgModule,\n    ElementRef,\n    ModuleWithProviders,\n    ContentChild,\n    EventEmitter,\n    AfterContentInit,\n    HostListener,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR,\n    NgForm,\n    FormsModule\n} from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\nimport { Md2AutocompleteModule } from '../autocomplete/autocomplete';\nimport { KeyCodes } from '../core/core';\n\nconst noop = () => { };\n\nlet nextId = 0;\nexport const MD2_CHIPS_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Md2Chips),\n    multi: true\n};\n\n@Component({\n    selector: 'md2-chips',\n    template:\n    `<div class=\"md2-chips-container\" [class.md2-chip-disabled]=\"readonly\">\n        <span *ngFor=\"let chip of chipItemList; let i = index\" class=\"md2-chip\" [class.active]=\"selectedChip === i\">\n            <span>{{chip}}</span>\n            <span [innerHTML]=\"templateHtmlString\"></span>\n            <svg (click)=\"removeSelectedChip(i)\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"  *ngIf=\"isRemovable\">\n              <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n            </svg>            \n        </span>\n        <ng-content select=\".md2-template\"></ng-content>      \n        <form #chipInputForm=\"ngForm\" class=\"chip-input-form\" *ngIf=\"!readonly\">\n            <input *ngIf=\"!isAutoComplete\" class=\"chip-input\" type=\"text\" [(ngModel)]=\"inputValue\" name=\"chipInput\" [placeholder]=\"placeholder\" (paste)=\"inputPaste($event)\" (keydown)=\"inputChanged($event)\" (blur)=\"inputBlurred($event)\" (focus)=\"inputFocus()\"/>\n            <div *ngIf=\"isAutoComplete\">\n                <md2-autocomplete [items]=\"autocompleteDataList\"\n                                item-text=\"name\"\n                                [(ngModel)]=\"item\" name=\"autocomplete\" (change)=\"changeAutocomplete($event)\" [placeholder]=\"placeholder\" (keydown)=\"inputChanged($event)\">\n\t\t        </md2-autocomplete>\n            </div>\n        </form>\n    </div>   \n    <div class=\"chip-error\" *ngIf=\"this.chipItemList.length<this.minChips\">Minimum {{minChips}} chip required.</div>\n    <div class=\"chip-error\" *ngIf=\"this.chipItemList.length>=this.maxChips\">You are able to add Maximum {{maxChips}} chip.</div>\n`,\n    styles: [`\n    .template-content{display:inline;}\n    md2-chips{outline:none;}\n    md2-chips .md2-chips-container{display: block;box-shadow: 0 1px #ccc;padding: 5px 0;margin-bottom:10px;min-height:50px;box-sizing: border-box;clear:both;}\n    md2-chips .md2-chips-container:after{clear:both;content:'';display:table;}\n    md2-chips.chip-input-focus .md2-chips-container{box-shadow: 0 2px #0d8bff;}\n    md2-chips .md2-chip-disabled{cursor: default;}\n    md2-chips md2-autocomplete{margin:7px 0;}\n    md2-chips .md2-autocomplete-wrap{border-bottom:0 !important;}\n    .md2-template{display:none;}\n    .chip-input-disabled{pointer-events: none;cursor: default;}\n    .md2-chip{font-size: 16px;position: relative;cursor: default;border-radius: 16px;display: block;height: 32px;line-height: 32px;margin: 8px 8px 0 0;padding: 0 28px 0 12px;float: left;-moz-box-sizing: border-box;-webkit-box-sizing: border-box;box-sizing: border-box;max-width: 100%;background: rgb(224,224,224);color: rgb(66,66,66);white-space: nowrap;overflow: hidden;-ms-text-overflow: ellipsis;-o-text-overflow: ellipsis;text-overflow: ellipsis;}\n    .md2-chip.active {color: white;background: #0d8bff;}    \n    .chip-input-form {display: inline-block;height:32px;margin: 8px 8px 0 0;}\n    .md2-chip svg {position: absolute; top: 4px; right: 4px; cursor: pointer; display: inline-block; overflow: hidden;fill: currentColor; color: rgba(0,0,0,0.54); }\n    .md2-chip.active svg { color: rgba(255,255,255,0.87); }\n    .chip-remove {cursor: pointer;display: inline-block;padding: 0 3px;color: #616161;font-size: 30px;vertical-align: top;line-height: 21px;font-family: serif;}\n    .chip-input {display: inline-block;width: auto;box-shadow: one;border: 0;outline:none;height: 32px;line-height: 32px;font-size: 16px;}\n    .chip-error{font-size:13px;color:#fd0f0f;}\n    .md2-chips-container .chip-input-form .md2-autocomplete-wrap{border-bottom:0!important;}\n  `],\n    providers: [MD2_CHIPS_CONTROL_VALUE_ACCESSOR],\n\n    host: {\n        'role': 'chips',\n        '[id]': 'id',\n        '[tabindex]': 'readonly ? -1 : tabindex',\n        '[class.chip-input-focus]': 'isFocused || selectedChip >= 0',\n    },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class Md2Chips implements ControlValueAccessor, AfterContentInit {\n    @Input() addOnBlur: boolean = true;\n    @Input() addOnComma: boolean = true;\n    @Input() addOnEnter: boolean = true;\n    @Input() addOnPaste: boolean = true;\n    @Input() addOnSpace: boolean = false;\n    @Input() allowedPattern: RegExp = /.+/;\n    @Input() ngModel: string[];\n    @Input() pasteSplitPattern: string = ',';\n    @Input() placeholder: string = 'Add New';\n    @Input() autocompleteDataList: string[];\n    @Input() isAutoComplete: boolean = false;\n    @Input() isRemovable: boolean = true;\n    @Input() readonly: boolean = false;\n    @Input() minChips: number = 0;\n    @Input() maxChips: number = 10000;\n    @Input() id: string = 'md2-chips-' + (++nextId);\n    @Output() change: EventEmitter<any> = new EventEmitter<any>();\n    @ViewChild('chipInputForm') chipInputForm: NgForm;\n\n    private onTouchedCallback: () => void = noop;\n    private onChangeCallback: (_: any) => void = noop;\n    public chipItemList: Array<string> = [];\n    public inputValue: string = '';\n    public selectedChip: number = -1;\n    private splitRegExp: RegExp;\n    private templateHtmlString: any;\n    private item: any;\n    private isFocused: boolean = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    get element() {\n        const elements: any = { root: this.elementRef.nativeElement, mainDiv: null, template: null };\n        elements.mainDiv = elements.root.querySelector('.md2-chips-container');\n        elements.template = elements.mainDiv.querySelector('.md2-template');\n        return elements;\n    }\n\n    get value(): any {\n        return this.value;\n    };\n\n    /**\n     * set value\n     * @param value\n     */\n    set value(v: any) {\n        this.onChangeCallback(v);\n        this.change.emit(v);\n    }\n\n    changeAutocomplete(value: any) {\n        if (value) {\n            this.addNewChip([value]);\n            this.item = null;\n        }\n    }\n    ngAfterContentInit() {\n        let elements = this.element;\n        if (this.ngModel) {\n            this.chipItemList = this.ngModel;\n        }\n        this.splitRegExp = new RegExp(this.pasteSplitPattern);\n        if (elements.template) {\n            this.templateHtmlString = elements.template.innerHTML;\n        }\n    }\n\n    /**\n     * input key listener\n     * @param event\n     */\n    inputChanged(event: KeyboardEvent): void {\n        let key = event.keyCode;\n        switch (key) {\n            //back space\n            case KeyCodes.BACKSPACE:\n                this.backspaceEvent();\n                break;\n            //delete\n            case KeyCodes.DELETE:\n                this.backspaceEvent();\n                break;\n            //left arrow\n            case KeyCodes.LEFT_ARROW:\n                event.preventDefault();\n                if (this.selectedChip) {\n                    if (this.selectedChip < 0) { this.selectedChip = this.chipItemList.length - 1; }\n                    else { this.selectedChip = this.selectedChip - 1; }\n                }\n                break;\n            //right arrow\n            case KeyCodes.RIGHT_ARROW:\n                event.preventDefault();\n                if (this.selectedChip != -1) {\n                    if (this.selectedChip >= this.chipItemList.length) { this.selectedChip = 0; }\n                    else { this.selectedChip = this.selectedChip + 1; }\n                }\n                break;\n            //enter\n            case KeyCodes.ENTER:\n                if (this.addOnEnter) {\n                    this.addNewChip([this.inputValue]);\n                    event.preventDefault();\n                }\n                break;\n            //comma\n            case KeyCodes.COMMA:\n                if (this.addOnComma) {\n                    this.addNewChip([this.inputValue]);\n                    event.preventDefault();\n                }\n                break;\n            //space\n            case KeyCodes.SPACE:\n                if (this.addOnSpace) {\n                    this.addNewChip([this.inputValue]);\n                    event.preventDefault();\n                }\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    @HostListener('focus')\n    inputBlurred(event: Event): void {\n        if (this.addOnBlur && !this.readonly) { this.addNewChip([this.inputValue]); }\n        this.isFocused = false;\n    }\n\n    inputFocus(event: Event): void {\n        this.isFocused = true;\n    }\n\n    inputPaste(event: any): void {\n        let clipboardData = event.clipboardData || (event.originalEvent && event.originalEvent.clipboardData);\n        let pastedString = clipboardData.getData('text/plain');\n        let chips = this.addRegExpString(pastedString);\n        let chipsToAdd = chips.filter((chip) => this._isValid(chip));\n        this.addNewChip(chipsToAdd);\n        setTimeout(() => this._resetInput());\n    }\n\n    private addRegExpString(chipInputString: string): string[] {\n        chipInputString = chipInputString.trim();\n        let chips = chipInputString.split(this.splitRegExp);\n        return chips.filter((chip) => !!chip);\n    }\n\n    private _isValid(chipString: string): boolean {\n        if (this.chipItemList.indexOf(chipString) === -1)\n            return this.allowedPattern.test(chipString);\n    }\n    /**\n    * add new chip\n    * @param chips\n    */\n    private addNewChip(chips: string[]): void {\n        let validInput = chips.filter((chip) => this._isValid(chip));\n        if (this.maxChips) {\n            if (this.chipItemList.length < this.maxChips) {\n                this.chipItemList = this.chipItemList.concat(validInput.map(chip => chip.trim()));\n            }\n        }\n        else {\n            this.chipItemList = this.chipItemList.concat(validInput.map(chip => chip.trim()));\n            this.item = null;\n        }\n        this._resetSelected();\n        this._resetInput();\n        this.onChangeCallback(this.chipItemList);\n        this.change.emit(this.chipItemList);\n    }\n    /**\n   * remove selected chip\n   * @param chipIndexToRemove index of selected chip\n   */\n    private removeSelectedChip(chipIndexToRemove: number): void {\n        this.chipItemList.splice(chipIndexToRemove, 1);\n        this._resetSelected();\n        this.onChangeCallback(this.chipItemList);\n        this.change.emit(this.chipItemList);\n    }\n    /**\n    * select chip\n    * @param index of select chip\n    */\n    private selectChip(index: number) {\n        if (index >= -1 && index <= this.chipItemList.length) {\n            this.selectedChip = index;\n        }\n    }\n\n    private backspaceEvent(): void {\n        if (!this.inputValue.length && this.chipItemList.length && this.isRemovable) {\n            if (this.selectedChip != -1) {\n                this.removeSelectedChip(this.selectedChip);\n                this.selectedChip = this.chipItemList.length - 1;\n            } else {\n                this.selectedChip = this.chipItemList.length - 1;\n            }\n        }\n    }\n\n    private _resetSelected(): void {\n        this.selectedChip = -1;\n    }\n\n    private _resetInput(): void {\n        if (this.isAutoComplete) {\n            this.chipInputForm.controls['autocomplete'].setValue('');\n        }\n        else {\n            this.chipInputForm.controls['chipInput'].setValue('');\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n        this.chipItemList = value;\n    }\n    registerOnChange(fn: any) { this.onChangeCallback = fn; }\n    registerOnTouched(fn: any) { this.onTouchedCallback = fn; }\n}\n\nexport const MD2_CHIPS_DIRECTIVES: any[] = [Md2Chips];\n\n@NgModule({\n    imports: [CommonModule, FormsModule, Md2AutocompleteModule],\n    declarations: MD2_CHIPS_DIRECTIVES,\n    exports: MD2_CHIPS_DIRECTIVES\n})\nexport class Md2ChipsModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: Md2ChipsModule,\n            providers: []\n        };\n    }\n}"]}