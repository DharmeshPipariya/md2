{"version":3,"sources":["core/components.helper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAAA,qBAUO,eAAe,CAAC,CAAA;IACvB,iCAAyB,2BAA2B,CAAC,CAAA;IAGrD;QACE,0BAAoB,cAA8B,EACxC,wBAAkD,EAClD,QAAkB;YAFR,mBAAc,GAAd,cAAc,CAAgB;YACxC,6BAAwB,GAAxB,wBAAwB,CAA0B;YAClD,aAAQ,GAAR,QAAQ,CAAU;QAC5B,CAAC;QAEM,sCAAW,GAAlB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,2BAAQ,CAAC,CAAC;QACrC,CAAC;QAED;;;;;;;;;;;;;;;;;WAiBG;QACI,kDAAuB,GAA9B;YACE,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC/D,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAClC,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC3D,MAAM,IAAI,KAAK,CAAC,+CAA6C,OAAO,iBAAc,CAAC,CAAC;YACtF,CAAC;YACD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC;QACtC,CAAC;QAED;;;;;;;;;;;;WAYG;QACI,+CAAoB,GAA3B,UAA+B,cAAuB,EACpD,QAA0B,EAC1B,SAAwC;YACxC,IAAI,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;YAC7F,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;YAC7C,IAAI,aAAa,GAAa,cAAc,CAAC;YAC7C,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,aAAa,GAAG,yBAAkB,CAAC,qBAAqB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YACtF,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,gBAAgB,EAAE,QAAQ,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACpF,CAAC;QAED;;;;;;;;WAQG;QACI,2CAAgB,GAAvB,UAA2B,cAAuB,EAChD,qBAA0B,EAC1B,OAAY;YACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC9C,IAAI,SAAS,GAAG,yBAAkB,CAAC,OAAO,CAAC;gBACzC,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE;aACtD,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QACxE,CAAC;QAjFH;YAAC,iBAAU,EAAE;;4BAAA;QAkFb,uBAAC;IAAD,CAjFA,AAiFC,IAAA;IAjFY,wBAAgB,mBAiF5B,CAAA","file":"core/components.helper.js","sourcesContent":["import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  ReflectiveInjector,\r\n  ViewContainerRef,\r\n  ResolvedReflectiveProvider,\r\n  Type\r\n} from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class ComponentsHelper {\r\n  constructor(private applicationRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector) {\r\n  }\r\n\r\n  public getDocument(): any {\r\n    return this.injector.get(DOCUMENT);\r\n  }\r\n\r\n  /**\r\n   * This is a name conventional class to get application root view component ref\r\n   * to made this method working you need to add:\r\n   * ```typescript\r\n   *  @Component({\r\n   *   selector: 'my-app',\r\n   *   ...\r\n   *   })\r\n   *  export class MyApp {\r\n   *    constructor(viewContainerRef: ViewContainerRef) {\r\n   *        // A Default view container ref, usually the app root container ref.\r\n   *        // Has to be set manually until we can find a way to get it automatically.\r\n   *        this.viewContainerRef = viewContainerRef;\r\n   *      }\r\n   *  }\r\n   * ```\r\n   * @returns {ViewContainerRef} - application root view component ref\r\n   */\r\n  public getRootViewContainerRef(): ViewContainerRef {\r\n    const appInstance = this.applicationRef.components[0].instance;\r\n    if (!appInstance.viewContainerRef) {\r\n      const appName = this.applicationRef.componentTypes[0].name;\r\n      throw new Error(`Missing 'viewContainerRef' declaration in ${appName} constructor`);\r\n    }\r\n    return appInstance.viewContainerRef;\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of a Component and attaches it to the View Container found at the\r\n   * `location` specified as {@link ViewContainerRef}.\r\n   *\r\n   * You can optionally provide `providers` to configure the {@link Injector} provisioned for this\r\n   * Component Instance.\r\n   *\r\n   * Returns {@link ComponentRef} representing the newly created Component.\r\n   * @param ComponentClass - @Component class\r\n   * @param location - reference to the location\r\n   * @param providers - optional array of providers\r\n   * @returns {ComponentRef<T>} - returns ComponentRef<T>\r\n   */\r\n  public appendNextToLocation<T>(ComponentClass: Type<T>,\r\n    location: ViewContainerRef,\r\n    providers?: ResolvedReflectiveProvider[]): ComponentRef<T> {\r\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);\r\n    let parentInjector = location.parentInjector;\r\n    let childInjector: Injector = parentInjector;\r\n    if (providers && providers.length > 0) {\r\n      childInjector = ReflectiveInjector.fromResolvedProviders(providers, parentInjector);\r\n    }\r\n\r\n    return location.createComponent(componentFactory, location.length, childInjector);\r\n  }\r\n\r\n  /**\r\n   * Helper methods to add ComponentClass(like modal backdrop) with options\r\n   * of type ComponentOptionsClass to element next to application root\r\n   * or next to provided instance of view container\r\n   * @param ComponentClass - @Component class\r\n   * @param ComponentOptionsClass - options class\r\n   * @param options - instance of options\r\n   * @returns {ComponentRef<T>} - returns ComponentRef<T>\r\n   */\r\n  public appendNextToRoot<T>(ComponentClass: Type<T>,\r\n    ComponentOptionsClass: any,\r\n    options: any): ComponentRef<T> {\r\n    let location = this.getRootViewContainerRef();\r\n    let providers = ReflectiveInjector.resolve([\r\n      { provide: ComponentOptionsClass, useValue: options }\r\n    ]);\r\n    return this.appendNextToLocation(ComponentClass, location, providers);\r\n  }\r\n}"],"sourceRoot":"/source/"}