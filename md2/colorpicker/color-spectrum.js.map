{"version":3,"file":"color-spectrum.js","sourceRoot":"","sources":["../../../src/lib/colorpicker/color-spectrum.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ColorLocale, Hsva, Rgba } from './color-locale';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md2-color-spectrum',\n  templateUrl: 'color-spectrum.html',\n  styleUrls: ['colorpicker.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class Md2ColorSpectrum {\n\n  private _color: string;\n  private hsva: Hsva;\n  _hue: string;\n  _alpha: string;\n\n  constructor(private _locale: ColorLocale) { }\n\n  @Output() colorChange: EventEmitter<string> = new EventEmitter<string>();\n\n  @Input()\n  get color() { return this._color; }\n  set color(value: string) {\n    if (this._color !== value) {\n      this._color = value || this._locale.defaultValue;\n      this.hsva = this._locale.stringToHsva(this.color);\n      this.update(false);\n    }\n  }\n\n  get saturation(): any {\n    return {\n      'left': `${this.hsva.s * 100}%`,\n      'top': `${100 - this.hsva.v * 100}%`\n    };\n  }\n\n  get hue(): { [key: string]: string } {\n    return {\n      'left': `${this.hsva.h * 100}%`\n    };\n  }\n\n  get alpha(): { [key: string]: string } {\n    return {\n      'background': `linear-gradient(to right, transparent, ${this._alpha})`\n    };\n  }\n\n  get alphaPointer(): { [key: string]: string } {\n    return {\n      'left': `${this.hsva.a * 100}%`\n    };\n  }\n\n  _setSaturation(event: any) {\n    this.hsva.s = event.x / event.width;\n    this.hsva.v = 1 - event.y / event.height;\n    this.update(true);\n  }\n\n  _setHue(event: any) {\n    this.hsva.h = event.x / event.width;\n    this.update(true);\n  }\n\n  _setAlpha(event: any) {\n    this.hsva.a = event.x / event.width;\n    this.update(true);\n  }\n\n  private update(isInitialized: boolean) {\n    let rgba = this._locale.denormalizeRGBA(this._locale.hsvaToRgba(this.hsva));\n    let hueRgba = this._locale.denormalizeRGBA(this._locale.hsvaToRgba(new Hsva(this.hsva.h, 1, 1, 1)));\n\n    this._alpha = 'rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')';\n    this._hue = 'rgb(' + hueRgba.r + ',' + hueRgba.g + ',' + hueRgba.b + ')';\n    this._color = this._locale.outputFormat(this.hsva, this._locale.format);\n    if (isInitialized) {\n      this._emitChangeEvent();\n    }\n  }\n\n  /** Emits an event when the user selects a color. */\n  _emitChangeEvent(): void {\n    this.colorChange.emit(this.color);\n  }\n\n}\n"]}