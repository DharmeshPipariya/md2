{"version":3,"sources":["dialog/portal/dom-portal-host.ts"],"names":[],"mappings":"AAAA,iFAAiF;AACjF,2EAA2E;AAE3E,KAAK;AACL,0FAA0F;AAC1F,yBAAyB;AACzB,IAAI;AACJ,4EAA4E;AAC5E,KAAK;AACL,qDAAqD;AACrD,gBAAgB;AAChB,uCAAuC;AACvC,sDAAsD;AACtD,cAAc;AACd,KAAK;AAEL,uFAAuF;AACvF,gFAAgF;AAEhF,uEAAuE;AACvE,mCAAmC;AACnC,4DAA4D;AAC5D,6BAA6B;AAC7B,2CAA2C;AAC3C,oDAAoD;AAEpD,4DAA4D;AAC5D,kEAAkE;AAClE,iDAAiD;AACjD,qBAAqB;AACrB,WAAW;AACX,KAAK;AAEL,6EAA6E;AAC7E,kDAAkD;AAClD,yEAAyE;AAEzE,wFAAwF;AAExF,gCAAgC;AAChC,mDAAmD;AACnD,0BAA0B;AAC1B,sCAAsC;AACtC,SAAS;AACT,UAAU;AAEV,iDAAiD;AACjD,qDAAqD;AACrD,KAAK;AAEL,qBAAqB;AACrB,sBAAsB;AACtB,oDAAoD;AACpD,0EAA0E;AAC1E,OAAO;AACP,KAAK;AACL,GAAG","file":"dialog/portal/dom-portal-host.js","sourcesContent":["//import {ComponentResolver, ComponentRef, EmbeddedViewRef} from '@angular/core';\r\n//import {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\r\n\r\n///**\r\n// * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\r\n// * application context.\r\n// *\r\n// * This is the only part of the portal core that directly touches the DOM.\r\n// */\r\n//export class DomPortalHost extends BasePortalHost {\r\n//  constructor(\r\n//    private _hostDomElement: Element,\r\n//    private _componentResolver: ComponentResolver) {\r\n//    super();\r\n//  }\r\n\r\n//  /** Attach the given ComponentPortal to DOM element using the ComponentResolver. */\r\n//  attachComponentPortal(portal: ComponentPortal): Promise<ComponentRef<any>> {\r\n\r\n//    return this._componentResolver.resolveComponent(portal.component)\r\n//      .then(componentFactory => {\r\n//        let ref = portal.viewContainerRef.createComponent(\r\n//          componentFactory,\r\n//          portal.viewContainerRef.length,\r\n//          portal.viewContainerRef.parentInjector);\r\n\r\n//        let hostView = <EmbeddedViewRef<any>>ref.hostView;\r\n//        this._hostDomElement.appendChild(hostView.rootNodes[0]);\r\n//        this.setDisposeFn(() => ref.destroy());\r\n//        return ref;\r\n//      });\r\n//  }\r\n\r\n//  attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>> {\r\n//    let viewContainer = portal.viewContainerRef;\r\n//    let viewRef = viewContainer.createEmbeddedView(portal.templateRef);\r\n\r\n//    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\r\n\r\n//    this.setDisposeFn((() => {\r\n//      let index = viewContainer.indexOf(viewRef);\r\n//      if (index != -1) {\r\n//        viewContainer.remove(index);\r\n//      }\r\n//    }));\r\n\r\n//    // TODO(jelbourn): Return locals from view.\r\n//    return Promise.resolve(new Map<string, any>());\r\n//  }\r\n\r\n//  dispose(): void {\r\n//    super.dispose();\r\n//    if (this._hostDomElement.parentNode != null) {\r\n//      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\r\n//    }\r\n//  }\r\n//}\r\n"],"sourceRoot":"/source/"}