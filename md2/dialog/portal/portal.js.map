{"version":3,"sources":["dialog/portal/portal.ts"],"names":[],"mappings":"AAAA,8FAA8F;AAE9F,KAAK;AACL,oEAAoE;AACpE,wDAAwD;AACxD,KAAK;AACL,mCAAmC;AACnC,sCAAsC;AAEtC,wCAAwC;AACxC,0CAA0C;AAE1C,gCAAgC;AAChC,2CAA2C;AAC3C,KAAK;AAEL,2CAA2C;AAC3C,6BAA6B;AAC7B,oCAAoC;AAEpC,gCAAgC;AAChC,2BAA2B;AAC3B,KAAK;AAEL,qDAAqD;AACrD,+BAA+B;AAC/B,wCAAwC;AACxC,KAAK;AAEL,OAAO;AACP,4FAA4F;AAC5F,yEAAyE;AACzE,OAAO;AACP,uCAAuC;AACvC,gCAAgC;AAChC,KAAK;AACL,GAAG;AAGH,KAAK;AACL,sFAAsF;AACtF,KAAK;AACL,kEAAkE;AAClE,8EAA8E;AAC9E,2BAA2B;AAE3B,OAAO;AACP,iGAAiG;AACjG,mGAAmG;AACnG,wFAAwF;AACxF,OAAO;AACP,8CAA8C;AAE9C,6EAA6E;AAC7E,cAAc;AACd,iCAAiC;AACjC,+CAA+C;AAC/C,KAAK;AACL,GAAG;AAGH,KAAK;AACL,yFAAyF;AACzF,KAAK;AACL,gEAAgE;AAChE,+FAA+F;AAC/F,kCAAkC;AAElC,sFAAsF;AACtF,uCAAuC;AAEvC,OAAO;AACP,4DAA4D;AAC5D,oFAAoF;AACpF,2BAA2B;AAC3B,gFAAgF;AAChF,OAAO;AACP,sDAAsD;AAEtD,iFAAiF;AACjF,cAAc;AACd,kCAAkC;AAClC,+CAA+C;AAC/C,KAAK;AAEL,8BAA8B;AAC9B,yCAAyC;AACzC,KAAK;AAEL,oFAAoF;AACpF,qEAAqE;AACrE,gCAAgC;AAChC,KAAK;AAEL,6BAA6B;AAC7B,2CAA2C;AAC3C,4BAA4B;AAC5B,KAAK;AACL,GAAG;AAGH,KAAK;AACL,mEAAmE;AACnE,KAAK;AACL,+BAA+B;AAC/B,8CAA8C;AAE9C,2BAA2B;AAE3B,oBAAoB;AACpB,GAAG;AAGH,KAAK;AACL,iFAAiF;AACjF,yCAAyC;AACzC,KAAK;AACL,8DAA8D;AAC9D,qDAAqD;AACrD,yCAAyC;AAEzC,8DAA8D;AAC9D,mCAAmC;AAEnC,mEAAmE;AACnE,yCAAyC;AAEzC,oDAAoD;AACpD,mBAAmB;AACnB,0CAA0C;AAC1C,KAAK;AAEL,+CAA+C;AAE/C,8CAA8C;AAC9C,sCAAsC;AACtC,kDAAkD;AAClD,oDAAoD;AACpD,sCAAsC;AACtC,iDAAiD;AACjD,OAAO;AAEP,KAAK;AAEL,wFAAwF;AAExF,qFAAqF;AAErF,6BAA6B;AAC7B,iDAAiD;AACjD,kCAAkC;AAClC,oCAAoC;AACpC,0BAA0B;AAC1B,+BAA+B;AAC/B,OAAO;AAEP,mCAAmC;AACnC,KAAK;AAEL,eAAe;AACf,+BAA+B;AAC/B,sBAAsB;AACtB,OAAO;AAEP,8BAA8B;AAC9B,KAAK;AAEL,kCAAkC;AAClC,2BAA2B;AAC3B,KAAK;AACL,GAAG","file":"dialog/portal/portal.js","sourcesContent":["//import {TemplateRef, Type, ViewContainerRef, ElementRef, ComponentRef} from '@angular/core';\r\n\r\n///**\r\n// * A `Portal` is something that you want to render somewhere else.\r\n// * It can be attach to / detached from a `PortalHost`.\r\n// */\r\n//export abstract class Portal<T> {\r\n//  private _attachedHost: PortalHost;\r\n\r\n//  /** Attach this portal to a host. */\r\n//  attach(host: PortalHost): Promise<T> {\r\n\r\n//    this._attachedHost = host;\r\n//    return <Promise<T>>host.attach(this);\r\n//  }\r\n\r\n//  /** Detach this portal from its host */\r\n//  detach(): Promise<void> {\r\n//    let host = this._attachedHost;\r\n\r\n//    this._attachedHost = null;\r\n//    return host.detach();\r\n//  }\r\n\r\n//  /** Whether this portal is attached to a host. */\r\n//  get isAttached(): boolean {\r\n//    return this._attachedHost != null;\r\n//  }\r\n\r\n//  /**\r\n//   * Sets the PortalHost reference without performing `attach()`. This is used directly by\r\n//   * the PortalHost when it is performing an `attach()` or `detatch()`.\r\n//   */\r\n//  setAttachedHost(host: PortalHost) {\r\n//    this._attachedHost = host;\r\n//  }\r\n//}\r\n\r\n\r\n///**\r\n// * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n// */\r\n//export class ComponentPortal extends Portal<ComponentRef<any>> {\r\n//  /** The type of the component that will be instantiated for attachment. */\r\n//  public component: Type;\r\n\r\n//  /**\r\n//   * [Optional] Where the attached component should live in Angular's *logical* component tree.\r\n//   * This is different from where the component *renders*, which is determined by the PortalHost.\r\n//   * The origin necessary when the host is outside of the Angular application context.\r\n//   */\r\n//  public viewContainerRef: ViewContainerRef;\r\n\r\n//  constructor(component: Type, viewContainerRef: ViewContainerRef = null) {\r\n//    super();\r\n//    this.component = component;\r\n//    this.viewContainerRef = viewContainerRef;\r\n//  }\r\n//}\r\n\r\n\r\n///**\r\n// * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n// */\r\n//export class TemplatePortal extends Portal<Map<string, any>> {\r\n//  /** The embedded template that will be used to instantiate an embedded View in the host. */\r\n//  templateRef: TemplateRef<any>;\r\n\r\n//  /** Reference to the ViewContainer into which the template will be stamped out. */\r\n//  viewContainerRef: ViewContainerRef;\r\n\r\n//  /**\r\n//   * Additional locals for the instantiated embedded view.\r\n//   * These locals can be seen as \"exports\" for the template, such as how ngFor has\r\n//   * index / event / odd.\r\n//   * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\r\n//   */\r\n//  locals: Map<string, any> = new Map<string, any>();\r\n\r\n//  constructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\r\n//    super();\r\n//    this.templateRef = template;\r\n//    this.viewContainerRef = viewContainerRef;\r\n//  }\r\n\r\n//  get origin(): ElementRef {\r\n//    return this.templateRef.elementRef;\r\n//  }\r\n\r\n//  attach(host: PortalHost, locals?: Map<string, any>): Promise<Map<string, any>> {\r\n//    this.locals = locals == null ? new Map<string, any>() : locals;\r\n//    return super.attach(host);\r\n//  }\r\n\r\n//  detach(): Promise<void> {\r\n//    this.locals = new Map<string, any>();\r\n//    return super.detach();\r\n//  }\r\n//}\r\n\r\n\r\n///**\r\n// * A `PortalHost` is an space that can contain a single `Portal`.\r\n// */\r\n//export interface PortalHost {\r\n//  attach(portal: Portal<any>): Promise<any>;\r\n\r\n//  detach(): Promise<any>;\r\n\r\n//  dispose(): void;\r\n//}\r\n\r\n\r\n///**\r\n// * Partial implementation of PortalHost that only deals with attaching either a\r\n// * ComponentPortal or a TemplatePortal.\r\n// */\r\n//export abstract class BasePortalHost implements PortalHost {\r\n//  /** The portal currently attached to the host. */\r\n//  private _attachedPortal: Portal<any>;\r\n\r\n//  /** A function that will permanently dispose this host. */\r\n//  private _disposeFn: () => void;\r\n\r\n//  /** Whether this host has already been permanently disposed. */\r\n//  private _isDisposed: boolean = false;\r\n\r\n//  /** Whether this host has an attached portal. */\r\n//  hasAttached() {\r\n//    return this._attachedPortal != null;\r\n//  }\r\n\r\n//  attach(portal: Portal<any>): Promise<any> {\r\n\r\n//    if (portal instanceof ComponentPortal) {\r\n//      this._attachedPortal = portal;\r\n//      return this.attachComponentPortal(portal);\r\n//    } else if (portal instanceof TemplatePortal) {\r\n//      this._attachedPortal = portal;\r\n//      return this.attachTemplatePortal(portal);\r\n//    }\r\n\r\n//  }\r\n\r\n//  abstract attachComponentPortal(portal: ComponentPortal): Promise<ComponentRef<any>>;\r\n\r\n//  abstract attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>>;\r\n\r\n//  detach(): Promise<void> {\r\n//    this._attachedPortal.setAttachedHost(null);\r\n//    this._attachedPortal = null;\r\n//    if (this._disposeFn != null) {\r\n//      this._disposeFn();\r\n//      this._disposeFn = null;\r\n//    }\r\n\r\n//    return Promise.resolve(null);\r\n//  }\r\n\r\n//  dispose() {\r\n//    if (this.hasAttached()) {\r\n//      this.detach();\r\n//    }\r\n\r\n//    this._isDisposed = true;\r\n//  }\r\n\r\n//  setDisposeFn(fn: () => void) {\r\n//    this._disposeFn = fn;\r\n//  }\r\n//}\r\n"],"sourceRoot":"/source/"}