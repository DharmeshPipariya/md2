{"version":3,"sources":["dialog/overlay/overlay.ts"],"names":[],"mappings":"AAAA,UAAU;AACV,wBAAwB;AACxB,gBAAgB;AAChB,WAAW;AACX,eAAe;AACf,yBAAyB;AACzB,+CAA+C;AAC/C,0DAA0D;AAC1D,2CAA2C;AAE3C,mFAAmF;AACnF,6EAA6E;AAE7E,gCAAgC;AAChC,uBAAuB;AAEvB,sDAAsD;AACtD,wCAAwC;AAGxC,KAAK;AACL,kGAAkG;AAClG,gGAAgG;AAChG,mGAAmG;AACnG,mFAAmF;AACnF,IAAI;AACJ,gFAAgF;AAChF,KAAK;AACL,eAAe;AACf,wBAAwB;AACxB,kDAAkD;AAElD,gBAAgB;AAChB,oEAAoE;AACpE,qDAAqD;AACrD,OAAO;AAEP,8DAA8D;AAC9D,KAAK;AAEL,OAAO;AACP,0BAA0B;AAC1B,kDAAkD;AAClD,mDAAmD;AACnD,OAAO;AACP,qEAAqE;AACrE,yFAAyF;AACzF,KAAK;AAEL,OAAO;AACP,sFAAsF;AACtF,yDAAyD;AACzD,OAAO;AACP,wDAAwD;AACxD,+CAA+C;AAC/C,iDAAiD;AACjD,4CAA4C;AAE5C,sDAAsD;AAEtD,mCAAmC;AACnC,KAAK;AAEL,OAAO;AACP,2EAA2E;AAC3E,8DAA8D;AAC9D,wDAAwD;AACxD,OAAO;AACP,iEAAiE;AACjE,+BAA+B;AAC/B,YAAY;AACZ,kCAAkC;AAClC,QAAQ;AACR,KAAK;AAEL,OAAO;AACP,qEAAqE;AACrE,8CAA8C;AAC9C,mBAAmB;AACnB,4BAA4B;AAC5B,OAAO;AACP,mFAAmF;AACnF,uEAAuE;AACvE,KAAK;AACL,GAAG","file":"dialog/overlay/overlay.js","sourcesContent":["//import {\r\n//  //ComponentResolver,\r\n//  OpaqueToken,\r\n//  Inject,\r\n//  Injectable,\r\n//} from '@angular/core';\r\n//import {OverlayState} from './overlay-state';\r\n//import {DomPortalHost} from '../portal/dom-portal-host';\r\n//import {OverlayRef} from './overlay-ref';\r\n\r\n///** Token used to inject the DOM element that serves as the overlay container. */\r\n//export const OVERLAY_CONTAINER_TOKEN = new OpaqueToken('overlayContainer');\r\n\r\n///** Next overlay unique ID. */\r\n//let nextUniqueId = 0;\r\n\r\n///** The default state for newly created overlays. */\r\n//let defaultState = new OverlayState();\r\n\r\n\r\n///**\r\n// * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n// * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n// * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n// * of re-usable components rather than developers building end-user applications.\r\n// *\r\n// * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n// */\r\n//@Injectable()\r\n//export class Overlay {\r\n//  private _overlayContainerElement: HTMLElement;\r\n\r\n//  constructor(\r\n//    @Inject(OVERLAY_CONTAINER_TOKEN) overlayContainerElement: any,\r\n//    //private _componentResolver: ComponentResolver\r\n//  ) {\r\n\r\n//    this._overlayContainerElement = overlayContainerElement;\r\n//  }\r\n\r\n//  /**\r\n//   * Creates an overlay.\r\n//   * @param state State to apply to the overlay.\r\n//   * @returns A reference to the created overlay.\r\n//   */\r\n//  create(state: OverlayState = defaultState): Promise<OverlayRef> {\r\n//    return this._createPaneElement().then(pane => this._createOverlayRef(pane, state));\r\n//  }\r\n\r\n//  /**\r\n//   * Creates the DOM element for an overlay and appends it to the overlay container.\r\n//   * @returns Promise resolving to the created element.\r\n//   */\r\n//  private _createPaneElement(): Promise<HTMLElement> {\r\n//    var pane = document.createElement('div');\r\n//    pane.id = 'md-overlay-' + (nextUniqueId++);\r\n//    pane.classList.add('md-overlay-pane');\r\n\r\n//    this._overlayContainerElement.appendChild(pane);\r\n\r\n//    return Promise.resolve(pane);\r\n//  }\r\n\r\n//  /**\r\n//   * Create a DomPortalHost into which the overlay content can be loaded.\r\n//   * @param pane The DOM element to turn into a portal host.\r\n//   * @returns A portal host for the given DOM element.\r\n//   */\r\n//  private _createPortalHost(pane: HTMLElement): DomPortalHost {\r\n//    return new DomPortalHost(\r\n//      pane\r\n//      //,this._componentResolver\r\n//    );\r\n//  }\r\n\r\n//  /**\r\n//   * Creates an OverlayRef for an overlay in the given DOM element.\r\n//   * @param pane DOM element for the overlay\r\n//   * @param state\r\n//   * @returns {OverlayRef}\r\n//   */\r\n//  private _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\r\n//    return new OverlayRef(this._createPortalHost(pane), pane, state);\r\n//  }\r\n//}\r\n"],"sourceRoot":"/source/"}