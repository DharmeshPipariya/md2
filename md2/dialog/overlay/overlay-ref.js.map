{"version":3,"sources":["dialog/overlay/overlay-ref.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+CAA+C;AAE/C,KAAK;AACL,4EAA4E;AAC5E,mDAAmD;AACnD,KAAK;AACL,iDAAiD;AACjD,gBAAgB;AAChB,sCAAsC;AACtC,iCAAiC;AACjC,uCAAuC;AAEvC,+CAA+C;AAC/C,6CAA6C;AAC7C,KAAK;AAEL,4BAA4B;AAC5B,uCAAuC;AACvC,KAAK;AAEL,qBAAqB;AACrB,iCAAiC;AACjC,KAAK;AACL,GAAG","file":"dialog/overlay/overlay-ref.js","sourcesContent":["//import {PortalHost, Portal} from '../portal/portal';\r\n//import {OverlayState} from './overlay-state';\r\n\r\n///**\r\n// * Reference to an overlay that has been created with the Overlay service.\r\n// * Used to manipulate or dispose of said overlay.\r\n// */\r\n//export class OverlayRef implements PortalHost {\r\n//  constructor(\r\n//    private _portalHost: PortalHost,\r\n//    private _pane: HTMLElement,\r\n//    private _state: OverlayState) { }\r\n\r\n//  attach(portal: Portal<any>): Promise<any> {\r\n//    return this._portalHost.attach(portal);\r\n//  }\r\n\r\n//  detach(): Promise<any> {\r\n//    return this._portalHost.detach();\r\n//  }\r\n\r\n//  dispose(): void {\r\n//    this._portalHost.dispose();\r\n//  }\r\n//}\r\n"],"sourceRoot":"/source/"}