{"version":3,"sources":["toast/toast.ts"],"names":[],"mappings":"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","file":"toast.js","sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Optional,\n  ReflectiveInjector,\n  ViewContainerRef,\n  NgModule,\n  ModuleWithProviders\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Md2ToastComponent } from './toast.component';\n\nexport class Toast {\n  id: number;\n  isVisible: boolean;\n  constructor(public message: string) { }\n}\n\n@Injectable()\nexport class Md2Toast {\n  private delay: number = 3000;\n  private index: number = 0;\n\n  container: ComponentRef<any>;\n\n  constructor(private _componentFactory: ComponentFactoryResolver, private _appRef: ApplicationRef) { }\n\n  /**\n   * toast message\n   * @param toast string or object with message and other properties of toast\n   */\n  toast(toast: string | { message: string, hideDelay: number }) {\n    this.show(toast);\n  }\n\n  /**\n   * show toast\n   * @param toastObj string or object with message and other properties of toast\n   */\n  show(toastObj: string | { message: string, hideDelay: number }) {\n    let toast: Toast;\n    if (typeof toastObj === 'string') {\n      toast = new Toast(toastObj);\n    } else if (typeof toastObj === 'object') {\n      toast = new Toast(toastObj.message);\n      this.delay = toastObj.hideDelay;\n    }\n    if (toast) {\n      if (!this.container) {\n        let app: any = this._appRef;\n        let appContainer: ViewContainerRef = app['_rootComponents'][0]['_hostElement'].vcRef;\n\n        let providers = ReflectiveInjector.resolve([]);\n\n        let toastFactory = this._componentFactory.resolveComponentFactory(Md2ToastComponent);\n        let childInjector = ReflectiveInjector.fromResolvedProviders(providers, appContainer.parentInjector);\n        this.container = appContainer.createComponent(toastFactory, appContainer.length, childInjector);\n        this.setupToast(toast);\n\n      } else {\n        this.setupToast(toast);\n      }\n    }\n  }\n\n  /**\n   * toast timeout\n   * @param toastId\n   */\n  startTimeout(toastId: number) {\n    setTimeout(() => {\n      this.clear(toastId);\n    }, this.delay);\n  }\n\n  /**\n   * setup toast\n   * @param toast\n   */\n  setupToast(toast: Toast) {\n    toast.id = ++this.index;\n    this.container.instance.add(toast);\n    this.startTimeout(toast.id);\n  }\n\n  /**\n   * clear specific toast\n   * @param toastId\n   */\n  clear(toastId: number) {\n    if (this.container) {\n      let instance = this.container.instance;\n      instance.remove(toastId);\n      setTimeout(() => {\n        if (!instance.hasToast()) { this.dispose(); }\n      }, 250);\n\n    }\n  }\n\n  /**\n   * clear all toasts\n   */\n  clearAll() {\n    if (this.container) {\n      let instance = this.container.instance;\n      instance.removeAll();\n      setTimeout(() => {\n        if (!instance.hasToast()) { this.dispose(); }\n      }, 250);\n\n    }\n  }\n\n  /**\n   * dispose all toasts\n   */\n  dispose() {\n    this.container.destroy();\n    this.container = null;\n  }\n\n}\n\nexport const MD2_TOAST_DIRECTIVES: any[] = [Md2ToastComponent];\n\n@NgModule({\n  imports: [CommonModule],\n  exports: MD2_TOAST_DIRECTIVES,\n  declarations: MD2_TOAST_DIRECTIVES,\n  providers: [Md2Toast],\n  entryComponents: MD2_TOAST_DIRECTIVES\n})\nexport class Md2ToastModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: Md2ToastModule,\n      providers: []\n    };\n  }\n}\n"]}