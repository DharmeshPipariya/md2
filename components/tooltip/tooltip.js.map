{"version":3,"sources":["components/tooltip/tooltip.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAAmI,eAAe,CAAC,CAAA;AACnJ,oCAAkC,qBAAqB,CAAC,CAAA;AACxD,kCAAgC,mBAAmB,CAAC,CAAA;AAMpD;IAaE,YAAmB,gBAAkC,EAAE,MAA8B;QAZ7E,YAAO,GAAY,KAAK,CAAC;QAIL,cAAS,GAAW,QAAQ,CAAC;QACjC,UAAK,GAAW,CAAC,CAAC;QAQxC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAIM,IAAI,CAAC,KAAY;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,OAAO,GAAG,IAAI,mCAAiB,CAAC;YAClC,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO;SACtC,CAAC,CAAC;QAEH,IAAI,OAAO,GAAG,yBAAkB,CAAC,OAAO,CAAC;YACvC,IAAI,eAAQ,CAAC,mCAAiB,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;SACvD,CAAC,CAAC;QACH,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM;iBACvB,kBAAkB,CAAC,uCAAmB,EAAE,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC;iBACvE,IAAI,CAAC,CAAC,YAA+B;gBACpC,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAIM,IAAI,CAAC,KAAY;QACtB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,YAA+B;gBAChD,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;AACH,CAAC;AAxDC;IAAC,YAAK,CAAC,SAAS,CAAC;;2CAAA;AACjB;IAAC,YAAK,CAAC,mBAAmB,CAAC;;6CAAA;AAC3B;IAAC,YAAK,CAAC,eAAe,CAAC;;yCAAA;AAYvB;IAAC,mBAAY,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;IACnC,mBAAY,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;sCAAA;AA0BvC;IAAC,mBAAY,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAC;IACpC,mBAAY,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;sCAAA;AAlDzC;IAAC,gBAAS,CAAC;QACT,QAAQ,EAAE,WAAW;KACtB,CAAC;;cAAA;AAEW,kBAAU,aA4DtB,CAAA;AAEY,0BAAkB,GAAe,CAAC,UAAU,EAAE,uCAAmB,CAAC,CAAC","file":"components/tooltip/tooltip.js","sourcesContent":["import {Directive, Input, HostListener, DynamicComponentLoader, ComponentRef, Provider, ReflectiveInjector, ViewContainerRef} from '@angular/core';\r\nimport {Md2TooltipComponent} from './tooltip.component';\r\nimport {Md2TooltipOptions} from './tooltip.options';\r\n\r\n@Directive({\r\n  selector: '[tooltip]'\r\n})\r\n\r\nexport class Md2Tooltip {\r\n  private visible: boolean = false;\r\n  private timer: number;\r\n\r\n  @Input('tooltip') content: string;\r\n  @Input('tooltip-direction') direction: string = 'bottom';\r\n  @Input('tooltip-delay') delay: number = 0;\r\n\r\n  public viewContainerRef: ViewContainerRef;\r\n  public loader: DynamicComponentLoader;\r\n\r\n  private tooltip: Promise<ComponentRef<any>>;\r\n\r\n  public constructor(viewContainerRef: ViewContainerRef, loader: DynamicComponentLoader) {\r\n    this.viewContainerRef = viewContainerRef;\r\n    this.loader = loader;\r\n  }\r\n\r\n  @HostListener('focusin', ['$event'])\r\n  @HostListener('mouseenter', ['$event'])\r\n  public show(event: Event): void {\r\n    if (this.visible) {\r\n      return;\r\n    }\r\n    this.visible = true;\r\n    let options = new Md2TooltipOptions({\r\n      content: this.content,\r\n      direction: this.direction,\r\n      hostEl: this.viewContainerRef.element\r\n    });\r\n\r\n    let binding = ReflectiveInjector.resolve([\r\n      new Provider(Md2TooltipOptions, { useValue: options })\r\n    ]);\r\n    clearTimeout(this.timer);\r\n    this.timer = setTimeout(() => {\r\n      this.timer = 0;\r\n      this.tooltip = this.loader\r\n        .loadNextToLocation(Md2TooltipComponent, this.viewContainerRef, binding)\r\n        .then((componentRef: ComponentRef<any>) => {\r\n          return componentRef;\r\n        });\r\n    }, this.delay);\r\n  }\r\n\r\n  @HostListener('focusout', ['$event'])\r\n  @HostListener('mouseleave', ['$event'])\r\n  public hide(event: Event): void {\r\n    clearTimeout(this.timer);\r\n    if (!this.visible) {\r\n      return;\r\n    }\r\n    this.visible = false;\r\n    if (this.tooltip) {\r\n      this.tooltip.then((componentRef: ComponentRef<any>) => {\r\n        componentRef.destroy();\r\n        return componentRef;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const TOOLTIP_DIRECTIVES: Array<any> = [Md2Tooltip, Md2TooltipComponent];"],"sourceRoot":"/source/"}